package github.madeoliveira.controlefinanceiro.service.impl;

import java.math.BigDecimal;
import java.util.List;
import java.util.Objects;

import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;
import org.springframework.data.domain.ExampleMatcher.StringMatcher;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import github.madeoliveira.controlefinanceiro.enums.StatusLancamento;
import github.madeoliveira.controlefinanceiro.exceptions.RegraNegocioException;
import github.madeoliveira.controlefinanceiro.model.entity.Lancamento;
import github.madeoliveira.controlefinanceiro.model.repository.LancamentoRepository;
import github.madeoliveira.controlefinanceiro.service.LancamentoService;

@Service
public class LancamentoServiceImpl implements LancamentoService {

	private LancamentoRepository repository;

	public LancamentoServiceImpl(LancamentoRepository repositry) {
		this.repository = repositry;
	}

	@Override
	@Transactional
	public Lancamento salvar(Lancamento lancamento) {
		return repository.save(lancamento);
	}

	@Override
	@Transactional
	public Lancamento atualizar(Lancamento lancamento) {
		Objects.requireNonNull(lancamento.getId());
		return repository.save(lancamento);
	}

	@Override
	@Transactional
	public void deletar(Lancamento lancamneto) {
		Objects.requireNonNull(lancamneto.getId());
		repository.delete(lancamneto);

	}

	@Override
	@Transactional
	public List<Lancamento> buscar(Lancamento lancamentoFiltro) {
		Example example = Example.of(lancamentoFiltro,
				ExampleMatcher.matching().withIgnoreCase().withStringMatcher(StringMatcher.CONTAINING));
		return repository.findAll(example);
	}

	@Override
	@Transactional
	public void atualizarStatus(Lancamento lancamento, StatusLancamento staus) {
		lancamento.setStatus(staus);
		atualizar(lancamento);

	}

	@Override
	public void validar(Lancamento lancamento) {
		if(lancamento.getDescricao()==null || lancamento.getDescricao().trim().equals(" ")) {
			throw new RegraNegocioException("Informe um Descrição válida! ");
		}
		if (lancamento.getMes() == null || lancamento.getMes()<1 || lancamento.getMes()>12) {
			throw new RegraNegocioException("Informe um Mês válido!");
		}
		if (lancamento.getAno() ==null|| lancamento.getAno().toString().length() !=4) {
			throw new RegraNegocioException("Informe um Ano válido!");
		}
		if (lancamento.getUsuario() == null || lancamento.getUsuario().getId()==null) {
			throw new RegraNegocioException("Informe o Usuário!");
		}
		if (lancamento.getValor()==null || lancamento.getValor().compareTo(BigDecimal.ZERO)<1) {
			
		}
	}

}
